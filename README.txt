В папке parser лежат основные классы. 
	xml.js это чисто парсер с  возсожностью задания правил для новых форматов(по умолчанию xml).
	xml2db.js это обертка парсера выше для работы с базой данных mysql.
Пример использования xmlToDB есть в tests/atom.js и tests/xml.js.
import - загружает xml в базу.
synchronize - обновляет xml в базе(изменения из xml файла в xml базы).
export - выгружает xml из базы в файл.
clean - очищает xml в базе(желательно выполнять если возникли какие то ошибки при импорте или других операциях, а затем повторять операции).

Ограничения:
	1) В xml файле можно изменять \удалять\добавлять атрибуты и текст тега. Удалять\добавлять\переименовывать елемент(тег) пока нельзя.
	2) xml файл не должен состоять более чем из 30 уникальных тегов(повторения допускаются).
	3) Временно похожие имена елементов(тегов) не поддерживаются: xsl:qe и т.п.

Про реализацию:
	Используется парсер expat писаный на C так как он самый производительный. Поверх него написана обертка, для добавления новых форматов, путем добавления опций(правил пример которых можно посмотреть в реализации обертки parser/xml.js).
	Используются потоки(стримы), что б не загружать файл в память целиком.
	Сейчас xml файл конвертируется в sql таблицу(ы). Есть стандартное решения этой проблемы как связанные таблицы, но при такой реализации есть несколько проблем:
		1) Чем больше вложенностей, тем тяжелей разрабатывать\поддерживать и понимать. В среднем поддерживает до ~8 вложенностей.
		2) Потеря данных при конвертировании из sql таблиц в xml файл(то есть части данных из оригинального файла в новом файле не будет).
		
	По этому я придумал свое решение, которое от 1-й проблемы избавляется полностью, а 2-ю скорей всего тоже можно решить.
	При этом создается минимальное кол-во таблиц по сравнению с другими решениями.
	Возможно такое решение не новое и уже давно кем-то писанное, но я на него не наткнулся.
	Могу подробно описать, если потребуется.
	
Сейчас данная реализация не идеал, например, что я бы еще доделал:
	1) По максимумуу избавился бы(где это возможно от вложенных циклов(цикл в цикле).
	2) Пересмотрел операции сравнения(скорей всего их можно ускорить).
	3) Сейчас дастаточно большое кол-во звпросов отправляется в конце, скорей всего отправлял бы их кусками, но тут надо искать золотую середину.
	4) Пересмотрел имена идентификаторов.
	5) Уделил бы внимание ошибкам и их обработке.

По производительности еще есть над чем поработать, но надо время.
Все интересующие вопросы можно задать в skype antoxa950, отвечу на все интересующие вопросы.